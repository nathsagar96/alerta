spring:
  application:
    name: asteroid-notification-service
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/asteroiddb}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false
  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${CONSUMER_GROUP_ID:asteroid-notification-group}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted.packages: "*"
            use.type.headers: false
            value.default.type: dev.sagar.astro.notification.dto.AsteroidThreatEvent
  mail:
    host: ${MAIL_HOST:localhost}
    port: ${MAIL_PORT:1025}
    username: ${MAIL_USERNAME:no-reply@example.com}
    password: ${MAIL_PASSWORD:password}
    properties:
      mail:
        smtp:
          starttls:
            enable: true
          auth: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

# Kafka Topic Configuration
kafka:
  topic:
    asteroid-threats: ${KAFKA_TOPIC:asteroid-threats}

# Notification Configuration
notification:
  email:
    to: alerts@example.com,admin@example.com

# Logging Configuration
logging:
  level:
    dev.sagar.astro: INFO
    org.springframework.kafka: INFO
    org.hibernate: ERROR

server:
    port: ${SERVER_PORT:8081}
